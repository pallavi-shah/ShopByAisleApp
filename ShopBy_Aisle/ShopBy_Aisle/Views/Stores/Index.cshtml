@model IEnumerable<ShopBy_Aisle.Models.Store>

@{
    ViewData["Title"] = "Index";
}

@* ======================Google maps search feature========================*@
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDC_AQlgeXGhDuk31_1awPHRDRzfkYab7U&callback=initMap&libraries=places">
    </script>
</head>
<body>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 600px;
            width: 100%;
        }

        .label {
            color: white;
            padding: 8px;
            font-family: Arial;
            width: 100%;
        }

        .info {
            background-color: #2196F3;
        }

        #mapSearch {
            width: 100%;
            height: 30px;
            text-align: center;
        }
    </style>
    <br />
    <br />
    
    <div>
        <div style="text-align:right">
            <a href="#storetable" style="font-weight:bold;font-size:14px"> GO TO MY STORES LIST</a>
        </div>
        <br />
        <br />
        <div style="text-align:center">
            <span class="btn btn-sm btn-block btn-primary">ADD STORE USING GOOGLE MAP</span>
        </div>
    </div>
    
    <br />
    
    <span style="font-size:smaller; color:darkslateblue; font-weight:bold">&emsp;*NOTE : Search store in google map and click on the icon to add it to your stores list.</span>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12 col-xs-12">
                <input type="text" class="controls" id="mapSearch" placeholder="Search Store" style="text-align:center; font-size:16px"/>
            </div>
        </div>
    </div>
    <br />
    <div class="container">
        <div id="map" style='width:100%;height:400px;'></div>
        <script>
            var jsonSelected = {};
            var infowindowSelected = null;
            function addStore() {
                flagsave = confirm("Do you want to add " + jsonSelected["name"] + " \nAddress: " + jsonSelected["address"]);
                if (flagsave == true) {
                    document.getElementById("mapSearch").value = "";
                    $.ajax({
                        url: '/Stores/AddStore',
                        type: 'POST',
                        dataType: 'json',
                        data: { JsonStr: JSON.stringify(jsonSelected) },
                        success: function (data) {
                            if (data.success) {
                                infowindowSelected.setContent(data.message);
                                elementstorebody = document.getElementById("storetable");
                                elementstorebody.innerHTML += getNewStoreRow(data);
                                console.log(data.newstore);
                            } else {
                                infowindowSelected.setContent("Sorry, Unable to save, please try again.....");
                            }
                        }
                    })
                }
            }

            // function to add store to the storesList dynamically
            function getNewStoreRow(storedata) {
                if (storedata.nsID != undefined) {
                    str_tr = " <tr> <td>";
                    str_tr += storedata.nsName;   // kohls
                    str_tr += "</td> <td>";
                    str_tr += storedata.nsAddress;  //  14425 Andersohn Dr, Manchester, MO 63011, USA
                    str_tr += "</td> <td hidden>";
                    str_tr += storedata.nsUserName; // test100@gmail.com
                    str_tr += "</td> <td>";
                    str_tr += "<a href='/Stores/Edit/" + storedata.nsID + "'><img src='/Images/Pencil-icon.png' width='20' height='20'/></a> ";
                    str_tr += "</td> <td>";
                    str_tr += "<a href='/Stores/Delete/" + storedata.nsID + "'><img src='/Images/EDelete-icon.png' width='20' height='20'</a> ";
                    str_tr += "</td> </tr";
                }
                return str_tr;
            }
            // Function to initialise Google map
            function initMap() {
                var map;
                var center = { lat: 38.6278756, lng: - 90.5751173 };
                map = new google.maps.Map(document.getElementById('map'), {
                    center: center,
                    zoom: 13,
                    streetViewControl: false,
                    disableDefaultUI: true
                });
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var image = 'http://maps.google.com/mapfiles/ms/micons/red-dot.png';
                        var marker = new google.maps.Marker({ position: pos, map: map, icon: image });
                    });
                };

                // Create the search box and link it to the UI element.

                var input = document.getElementById('mapSearch');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                // Bias the SearchBox results towards current map's viewport.
                map.addListener('bounds_changed', function () {
                    searchBox.setBounds(map.getBounds());
                });

                var markers = [];

                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener('places_changed', function () {
                    var places = searchBox.getPlaces();
                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function (place) {
                        if (!place.geometry) {
                            console.log("Returned place contains no geometry");
                            return;
                        }
                        var icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(50, 50)
                        };

                        // Create a marker for each place.
                        markers.push(new google.maps.Marker({
                            map: map,
                            icon: icon,
                            title: place.name,
                            position: place.geometry.location
                        }));

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }

                        var geocoder = new google.maps.Geocoder;
                        var infowindow = new google.maps.InfoWindow();

                        for (j = 0; j < markers.length; j++) {
                            markers[j].addListener('click', function () {
                                jsonSelected["name"] = this.title;
                                jsonSelected["alias"] = this.title;
                                var str_addr = "";
                                geocoder.geocode({ 'location': this.position }, function (results, status) {
                                    if (status === 'OK') {
                                        if (results[0]) {
                                            jsonSelected["address"] = results[0].formatted_address;
                                            infowindowSelected = infowindow;
                                            console.log("place_id = " + results[0].place_id);
                                            jsonSelected["place_id"] = results[0].place_id;
                                            jsonSelected["testvalue"] = "newcode";
                                            console.log("short_name = " + results[0].address_components[0].short_name);
                                            console.log("this.position = " + this.position);
                                            infowindow.setContent(results[1].formatted_address);
                                            addStore();
                                        };
                                    };
                                }); // end of geocode function
                                infowindow.setContent(this.title);
                                infowindow.open(map, this);
                            });
                        } // end of for
                    });
                    map.fitBounds(bounds);
                });
            };
         </script>
    </div>
    <hr />
    <br />
    <br />
    <span class="btn btn-primary btn-sm btn-block">MY STORES</span>
</body>

@* =============================Add Store form========================*@
<p>
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-xs-12">
                <div class="table-responsive">
                    <table class="table">
                        <tbody id="storetable">
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(modelItem => item.Alias)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Address)</td>
                                    <td hidden>@Html.DisplayFor(modelItem => item.UserName)</td>
                                    <td><a asp-action="Edit" asp-route-id="@item.ID"><img src="/Images/Pencil-icon.png" width="20" height="20" /></a></td>
                                    <td><a asp-action="Delete" asp-route-id="@item.ID"><img src="/Images/EDelete-icon.png" width="20" height="20" /></a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

