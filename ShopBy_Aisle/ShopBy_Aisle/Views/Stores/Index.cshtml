@model IEnumerable<ShopBy_Aisle.Models.Store>

@{
    ViewData["Title"] = "Index";
}

@* ======================Google maps search feature========================*@
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDC_AQlgeXGhDuk31_1awPHRDRzfkYab7U&callback=initMap&libraries=places">
    </script>
</head>
<body>
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 600px;
            width: 100%;
        }

        .label {
            color: white;
            padding: 8px;
            font-family: Arial;
            width: 5100px;
        }

        .info {
            background-color: #2196F3;
        }
    </style>

    <br />
    <span class="btn btn-primary btn-sm btn-block">Favorite Stores</span>
    <hr />
    <hr />

    <span class="label bg-secondary">Search Nearby Stores</span>
    <br />
    <input type="text" class="controls" id="mapSearch" placeholder="Search Store" size="50" />
    <br />
    <br />
    <div class="container">
        <div id="map"></div>
        <script>

            var jsonSelected = {};
            var infowindowSelected = null;


            function addStore() {
                flagsave = confirm("Do you want to add " + jsonSelected["name"] + " \nAddress: " + jsonSelected["address"]);
                if (flagsave == true) {
                    $.ajax({
                        url: '/Stores/AddStore',
                        type: 'POST',
                        dataType: 'json',
                        data: { JsonStr: JSON.stringify(jsonSelected) },
                        success: function (data) {
                            if (data.success) {
                                infowindowSelected.setContent(data.message);
                            } else {
                                infowindowSelected.setContent("Sorry, Unable to save, please try again.....");

                            }
                        }
                    })
                }

            }

            function initMap() {
                var map;
                var center = { lat: 38.6278756, lng: - 90.5751173 };
                map = new google.maps.Map(document.getElementById('map'), {
                    center: center,
                    zoom: 13
                });


                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var image = 'http://maps.google.com/mapfiles/ms/micons/red-dot.png';
                        var marker = new google.maps.Marker({ position: pos, map: map, icon: image });
                    });
                };

                // Create the search box and link it to the UI element.
                var input = document.getElementById('mapSearch');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                //autocomplete.bindTo('bounds', map);


                // Bias the SearchBox results towards current map's viewport.
                map.addListener('bounds_changed', function () {
                    searchBox.setBounds(map.getBounds());
                });

                var markers = [];

                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener('places_changed', function () {
                    var places = searchBox.getPlaces();
                    if (places.length == 0) {
                        return;
                    }

                    // Clear out the old markers.
                    markers.forEach(function (marker) {
                        marker.setMap(null);
                    });
                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function (place) {
                        if (!place.geometry) {
                            console.log("Returned place contains no geometry");
                            return;
                        }
                        var icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        // Create a marker for each place.
                        markers.push(new google.maps.Marker({
                            map: map,
                            icon: icon,
                            title: place.name,
                            position: place.geometry.location
                        }));

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }

                        var geocoder = new google.maps.Geocoder;
                        var infowindow = new google.maps.InfoWindow();

                        for (j = 0; j < markers.length; j++) {
                            markers[j].addListener('click', function () {

                                jsonSelected["name"] = this.title;
                                jsonSelected["alias"] = this.title;

                                var str_addr = "";
                                geocoder.geocode({ 'location': this.position }, function (results, status) {
                                    //alert("hi" + status);

                                    if (status === 'OK') {

                                        if (results[0]) {
                                            jsonSelected["address"] = results[0].formatted_address;

                                            infowindowSelected = infowindow;
                                            console.log("result = " + results);
                                            infowindow.setContent(results[1].formatted_address);

                                            addStore();
                                            // onclick = addStore(str_addr, str_name, str_alias);
                                        };
                                    };
                                }); // end of geocode function

                                infowindow.setContent(this.title);
                                infowindow.open(map, this);
                            });
                        } // end of for
                    });

                    map.fitBounds(bounds);
                });

            };

        </script>

    </div>

    <hr />

    <span class="btn btn-primary btn-lg btn-block">My Stores</span>
</body>
@* =============================Add Store form========================*@
<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            @*<th>
                @Html.DisplayNameFor(model => model.Alias)
            </th>*@
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                @*<td>
                    @Html.DisplayFor(modelItem => item.Alias)
                </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

